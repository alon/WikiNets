// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define([], function() {
  var TopBarCreate;
  return TopBarCreate = (function(_super) {
    __extends(TopBarCreate, _super);

    function TopBarCreate(options) {
      this.options = options;
      TopBarCreate.__super__.constructor.call(this);
    }

    TopBarCreate.prototype.init = function(instances) {
      _.extend(this, Backbone.Events);
      this.keyListener = instances['KeyListener'];
      this.graphView = instances['GraphView'];
      this.graphModel = instances['GraphModel'];
      this.dataController = instances['local/Neo4jDataController'];
      this.buildingLink = false;
      this.sourceSet = false;
      this.tempLink = {};
      this.render();
      $(this.el).appendTo($('#buildbar'));
      this.selection = instances["NodeSelection"];
      return this.linkSelection = instances["LinkSelection"];
    };

    TopBarCreate.prototype.render = function() {
      var $container, $createLinkButton, $createnodeNodeButton, $linkHolder, $linkInputDesc, $linkInputName, $linkInputUrl, $linkSide, $linkingInstructions, $nodeHolder, $nodeInputColor, $nodeInputDesc, $nodeInputName, $nodeInputSize, $nodeInputUrl, $nodeSide, $openPopoutButton,
        _this = this;
      $container = $('<div id="topbarcreate">').appendTo(this.$el);
      $nodeSide = $('<div id="nodeside">').appendTo($container);
      $nodeHolder = $('<textarea placeholder="Add Node" id="nodeHolder" name="textin" rows="1" cols="35"></textarea>').appendTo($nodeSide);
      this.$nodeWrapper = $('<div class="source-container">').appendTo($nodeSide);
      $nodeInputName = $('<textarea placeholder=\"Node Name [optional]\" rows="1" cols="35"></textarea><br>').appendTo(this.$nodeWrapper);
      $nodeInputUrl = $('<textarea placeholder="Url [optional]" rows="1" cols="35"></textarea><br>').appendTo(this.$nodeWrapper);
      $nodeInputColor = $('<textarea placeholder="Color [optional]" rows="1" cols="35"></textarea><br>').appendTo(this.$nodeWrapper);
      $nodeInputSize = $('<textarea placeholder="Size [optional]" rows="1" cols="35"></textarea><br>').appendTo(this.$nodeWrapper);
      $nodeInputDesc = $('<textarea placeholder="say somthing about your node...." rows="5" cols="35"></textarea><br>').appendTo(this.$nodeWrapper);
      $createnodeNodeButton = $('<input id="queryform" type="button" value="Create Node">').appendTo(this.$nodeWrapper);
      $createnodeNodeButton.click(function() {
        _this.buildNode(_this.parseNewSyntax($nodeInputName.val() + ":#:" + $nodeInputUrl.val() + ":#:" + $nodeInputColor.val() + ":#:" + $nodeInputSize.val() + ":#:" + $nodeInputDesc.val()));
        $nodeInputName.val('');
        $nodeInputUrl.val('');
        $nodeInputDesc.val('');
        return $nodeInputName.focus();
      });
      $openPopoutButton = $('<i class="right fa fa-expand"></i>').appendTo(this.$nodeWrapper);
      $openPopoutButton.click(function() {
        _this.trigger('popout:open');
        _this.$nodeWrapper.hide();
        return $nodeHolder.show();
      });
      $linkSide = $('<div id="linkside">').appendTo($container);
      $linkHolder = $('<textarea placeholder="Add Link" id="nodeHolder" name="textin" rows="1" cols="35"></textarea><br>').appendTo($linkSide);
      this.$linkWrapper = $('<div id="source-container">').appendTo($linkSide);
      $linkInputName = $('<textarea placeholder=\"Link Name\" rows="1" cols="35"></textarea><br>').appendTo(this.$linkWrapper);
      $linkInputUrl = $('<textarea placeholder="Url [optional]" rows="1" cols="35"></textarea><br>').appendTo(this.$linkWrapper);
      $linkInputDesc = $('<textarea placeholder="Description\n #key1 value1 #key2 value2" rows="5" cols="35"></textarea><br>').appendTo(this.$linkWrapper);
      $createLinkButton = $('<input id="queryform" type="submit" value="Create Link"><br>').appendTo(this.$linkWrapper);
      $linkingInstructions = $('<span id="toplink-instructions">').appendTo($container);
      $createLinkButton.click(function() {
        var tlink;
        _this.buildLink(tlink = _this.parseSyntax($linkInputName.val() + " : " + $linkInputDesc.val() + " #url " + $linkInputUrl.val()));
        $linkInputName.val('');
        $linkInputUrl.val('');
        $linkInputDesc.val('');
        _this.$linkWrapper.hide();
        return $('#toplink-instructions').replaceWith('<span id="toplink-instructions" style="color:black; font-size:20px">Click two Nodes to link them.</span>');
      });
      this.$nodeWrapper.hide();
      this.$linkWrapper.hide();
      $nodeHolder.focus(function() {
        _this.$nodeWrapper.show();
        $nodeInputName.focus();
        return $nodeHolder.hide();
      });
      $linkHolder.focus(function() {
        _this.$linkWrapper.show();
        $linkInputName.focus();
        return $linkHolder.hide();
      });
      this.graphView.on("view:click", function() {
        if (_this.$nodeWrapper.is(':visible')) {
          _this.$nodeWrapper.hide();
          $nodeHolder.show();
        }
        if (_this.$linkWrapper.is(':visible')) {
          _this.$linkWrapper.hide();
          return $linkHolder.show();
        }
      });
      return this.graphView.on("enter:node:click", function(node) {
        var link;
        if (_this.buildingLink) {
          if (_this.sourceSet) {
            _this.tempLink.target = node;
            link = _this.tempLink;
            _this.dataController.linkAdd(link, function(linkres) {
              var allNodes, n, newLink, _i, _j, _len, _len1;
              newLink = linkres;
              allNodes = _this.graphModel.getNodes();
              for (_i = 0, _len = allNodes.length; _i < _len; _i++) {
                n = allNodes[_i];
                if (n['_id'] === link.source['_id']) {
                  newLink.source = n;
                }
              }
              for (_j = 0, _len1 = allNodes.length; _j < _len1; _j++) {
                n = allNodes[_j];
                if (n['_id'] === link.target['_id']) {
                  newLink.target = n;
                }
              }
              _this.graphModel.putLink(newLink);
              return _this.linkSelection.toggleSelection(newLink);
            });
            _this.sourceSet = _this.buildingLink = false;
            $('#toplink-instructions').replaceWith('<span id="toplink-instructions"></span>');
            return $linkHolder.show();
          } else {
            _this.tempLink.source = node;
            _this.sourceSet = true;
            return $('#toplink-instructions').replaceWith('<span id="toplink-instructions" style="color:black; font-size:20px">Click two Nodes to link them.</span>');
          }
        }
      });
    };

    TopBarCreate.prototype.update = function(node) {
      return this.selection.getSelectedNodes();
    };

    TopBarCreate.prototype.buildNode = function(node) {
      var _this = this;
      return this.dataController.nodeAdd(node, function(datum) {
        datum.fixed = true;
        datum.px = $(window).width() / 2;
        datum.py = $(window).height() / 2;
        _this.graphModel.putNode(datum);
        return _this.selection.toggleSelection(datum);
      });
    };

    TopBarCreate.prototype.buildLink = function(linkProperties) {
      this.tempLink.properties = linkProperties;
      console.log("tempLink set to", this.tempLink);
      return this.buildingLink = true;
    };

    TopBarCreate.prototype.parseNewSyntax = function(input) {
      var createDate, dict, strsplit;
      strsplit = input.split(":#:");
      dict = {};
      dict["name"] = strsplit[0].trim();
      strsplit[1].trim() !== "" && (dict["url"] = strsplit[1].trim());
      strsplit[2].trim() !== "" && (dict["color"] = strsplit[2].trim());
      strsplit[3].trim() !== "" && (dict["size"] = strsplit[3].trim());
      strsplit[4].trim() !== "" && (dict["description"] = strsplit[4].trim());
      createDate = new Date();
      dict["_Creation_Date"] = createDate;
      return dict;
    };

    TopBarCreate.prototype.parseSyntax = function(input) {
      var createDate, dict, match, pattern, strsplit, text;
      strsplit = input.split('#');
      strsplit[0] = strsplit[0].replace(/:/, " #description ");
      /* The : is shorthand for #description*/

      text = strsplit.join('#');
      pattern = new RegExp(/#([a-zA-Z0-9]+) ([^#]+)/g);
      dict = {};
      match = {};
      while (match = pattern.exec(text)) {
        dict[match[1].trim()] = match[2].trim();
      }
      /*The first entry becomes the name*/

      dict["name"] = text.split('#')[0].trim();
      console.log("This is the title", text.split('#')[0].trim());
      createDate = new Date();
      dict["_Creation_Date"] = createDate;
      console.log("dictdict", dict);
      return dict;
    };

    return TopBarCreate;

  })(Backbone.View);
});
