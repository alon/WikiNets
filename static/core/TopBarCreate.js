// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define([], function() {
    var TopBarCreate;
    return TopBarCreate = (function(_super) {
      __extends(TopBarCreate, _super);

      function TopBarCreate(options) {
        this.options = options;
        this.createNode = __bind(this.createNode, this);
        this.assign_properties = __bind(this.assign_properties, this);
        this.addField = __bind(this.addField, this);
        TopBarCreate.__super__.constructor.call(this);
      }

      TopBarCreate.prototype.init = function(instances) {
        _.extend(this, Backbone.Events);
        this.keyListener = instances['KeyListener'];
        this.graphView = instances['GraphView'];
        this.graphModel = instances['GraphModel'];
        this.dataController = instances['local/Neo4jDataController'];
        this.buildingLink = false;
        this.tempLink = {};
        this.sourceSet = false;
        this.render();
        this.selection = instances["NodeSelection"];
        return this.selection.on("change", this.update.bind(this));
      };

      TopBarCreate.prototype.render = function() {
        var $container, $createLinkButton, $createNodeButton, $linkHolder, $linkInputDesc, $linkInputName, $linkInputUrl, $linkSide, $linkingInstructions, $nodeHolder, $nodeInputForm, $nodeMoreFields, $nodeSide, $openPopoutButton, nodeInputNumber,
          _this = this;
        $container = $('<div id="topbarcreate">').appendTo($('#buildbar'));
        $nodeSide = $('<div id="nodeside">').appendTo($container);
        $nodeHolder = $('<textarea placeholder="Add Node" id="nodeHolder" name="textin" rows="1" cols="35"></textarea>').appendTo($nodeSide);
        this.$nodeWrapper = $('<div id="NodeCreateContainer">').appendTo($nodeSide);
        this.$nodeInputName = $('<textarea id="NodeCreateName" placeholder=\"Node Name [optional]\" rows="1" cols="35"></textarea><br>').appendTo(this.$nodeWrapper);
        this.$nodeInputDesc = $('<textarea id="NodeCreateDesc" placeholder="Description [optional]" rows="1" cols="35"></textarea><br>').appendTo(this.$nodeWrapper);
        $nodeInputForm = $('<form id="NodeCreateForm"></form>').appendTo(this.$nodeWrapper);
        nodeInputNumber = 0;
        $nodeMoreFields = $("<input id=\"moreNodeCreateFields\" type=\"button\" value=\"+\">").appendTo(this.$nodeWrapper);
        $nodeMoreFields.click(function() {
          _this.addField(nodeInputNumber, "NodeCreate");
          return nodeInputNumber = nodeInputNumber + 1;
        });
        $createNodeButton = $('<input id="queryform" type="button" value="Create Node">').appendTo(this.$nodeWrapper);
        $createNodeButton.click(this.createNode);
        $openPopoutButton = $('<i class="right fa fa-expand"></i>').appendTo(this.$nodeWrapper);
        $openPopoutButton.click(function() {
          _this.trigger('popout:open');
          _this.$nodeWrapper.hide();
          return $nodeHolder.show();
        });
        $linkSide = $('<div id="linkside">').appendTo($container);
        $linkHolder = $('<textarea placeholder="Add Link" id="nodeHolder" name="textin" rows="1" cols="35"></textarea><br>').appendTo($linkSide);
        this.$linkWrapper = $('<div id="source-container">').appendTo($linkSide);
        $linkInputName = $('<textarea placeholder=\"Link Name [optional]\" rows="1" cols="35"></textarea><br>').appendTo(this.$linkWrapper);
        $linkInputUrl = $('<textarea placeholder="Url [optional]" rows="1" cols="35"></textarea><br>').appendTo(this.$linkWrapper);
        $linkInputDesc = $('<textarea placeholder="Description\n #key1 value1 #key2 value2" rows="5" cols="35"></textarea><br>').appendTo(this.$linkWrapper);
        $createLinkButton = $('<input id="queryform" type="submit" value="Create Link"><br>').appendTo(this.$linkWrapper);
        $linkingInstructions = $('<span id="toplink-instructions">').appendTo($container);
        $createLinkButton.click(function() {
          var tlink;
          _this.buildLink(tlink = _this.parseSyntax($linkInputName.val() + " : " + $linkInputDesc.val() + " #url " + $linkInputUrl.val()));
          $linkInputName.val('');
          $linkInputUrl.val('');
          $linkInputDesc.val('');
          _this.$linkWrapper.hide();
          return $('#toplink-instructions').replaceWith('<span id="toplink-instructions" style="color:black; font-size:20px">Click two Nodes to link them.</span>');
        });
        this.$nodeWrapper.hide();
        this.$linkWrapper.hide();
        $nodeHolder.focus(function() {
          _this.$nodeWrapper.show();
          _this.$nodeInputName.focus();
          return $nodeHolder.hide();
        });
        $linkHolder.focus(function() {
          _this.$linkWrapper.show();
          _this.$linkInputName.focus();
          return $linkHolder.hide();
        });
        this.graphView.on("view:click", function() {
          if (_this.$nodeWrapper.is(':visible')) {
            _this.$nodeWrapper.hide();
            $nodeHolder.show();
          }
          if (_this.$linkWrapper.is(':visible')) {
            _this.$linkWrapper.hide();
            return $linkHolder.show();
          }
        });
        return this.graphView.on("enter:node:click", function(node) {
          var link;
          if (_this.buildingLink) {
            if (_this.sourceSet) {
              _this.tempLink.target = node;
              link = _this.tempLink;
              _this.dataController.linkAdd(link, function(linkres) {
                var allNodes, n, newLink, _i, _j, _len, _len1;
                newLink = linkres;
                allNodes = _this.graphModel.getNodes();
                for (_i = 0, _len = allNodes.length; _i < _len; _i++) {
                  n = allNodes[_i];
                  if (n['_id'] === link.source['_id']) {
                    newLink.source = n;
                  }
                }
                for (_j = 0, _len1 = allNodes.length; _j < _len1; _j++) {
                  n = allNodes[_j];
                  if (n['_id'] === link.target['_id']) {
                    newLink.target = n;
                  }
                }
                return _this.graphModel.putLink(newLink);
              });
              _this.sourceSet = _this.buildingLink = false;
              $('#toplink-instructions').replaceWith('<span id="toplink-instructions"></span>');
              return $linkHolder.show();
            } else {
              _this.tempLink.source = node;
              _this.sourceSet = true;
              return $('#toplink-instructions').replaceWith('<span id="toplink-instructions" style="color:black; font-size:20px">Click a node to select it as the link target.</span>');
            }
          }
        });
      };

      TopBarCreate.prototype.update = function(node) {
        return this.selection.getSelectedNodes();
      };

      /*
      Adds a set of property & value input fields to the form /name/, together
      with a button for deleting them
      The inputIndex is a counter that serves as a unique identifier for each
      such set of fields.
      A defaultKey and defaultValue may be specified; these will be used as
      placeholders in the input fields.
      */


      TopBarCreate.prototype.addField = function(inputIndex, name, defaultKey, defaultValue) {
        var $row;
        if (!(defaultKey != null)) {
          defaultKey = "property";
        }
        if (!(defaultValue != null)) {
          defaultValue = "value";
        }
        $row = $("<div id=\"" + name + "Div" + inputIndex + "\" class=\"" + name + "Div\">\n<input style=\"width:80px\" name=\"property" + name + inputIndex + "\" placeholder=\"" + defaultKey + "\" class=\"property" + name + "\">\n<input style=\"width:80px\" name=\"value" + name + inputIndex + "\" placeholder=\"" + defaultValue + "\" class=\"value" + name + "\">\n<input type=\"button\" id=\"remove" + name + inputIndex + "\" value=\"x\" onclick=\"this.parentNode.parentNode.removeChild(this.parentNode);\">\n</div>");
        return $("#" + name + "Form").append($row);
      };

      /*
      Takes the input form /form_name/ and populates a propertyObject with the
      property-value pairs contained in it, checking the property names for
      legality in the process
      Returns: [submitOK, {property1: value1, property2: value2, ...}], where
               /submitOK/ is a boolean indicating whether all property names are
               legal
      */


      TopBarCreate.prototype.assign_properties = function(form_name, is_illegal) {
        var createDate, propertyObject, submitOK;
        if (is_illegal == null) {
          is_illegal = this.dataController.is_illegal;
        }
        submitOK = true;
        propertyObject = {};
        createDate = new Date();
        propertyObject["_Creation_Date"] = createDate;
        console.log($("#" + form_name + "Name").val(), $("#" + form_name + "Desc").val());
        if (!($("#" + form_name + "Name").val() === void 0 || $("#" + form_name + "Name").val() === "")) {
          propertyObject["name"] = $("#" + form_name + "Name").val().replace(/'/g, "\\'");
        }
        if (!($("#" + form_name + "Desc").val() === void 0 || $("#" + form_name + "Desc").val() === "")) {
          propertyObject["description"] = $("#" + form_name + "Desc").val().replace(/'/g, "\\'");
        }
        $("." + form_name + "Div").each(function(i, obj) {
          var property, value;
          property = $(this).children(".property" + form_name).val();
          value = $(this).children(".value" + form_name).val();
          if (is_illegal(property, "Property")) {
            return submitOK = false;
          } else if (property in propertyObject) {
            alert("Property '" + property + "' already assigned.\nFirst value: " + propertyObject[property] + "\nSecond value: " + value);
            return submitOK = false;
          } else {
            return propertyObject[property] = value.replace(/'/g, "\\'");
          }
        });
        return [submitOK, propertyObject];
      };

      /*
      Creates a node using the information in @$nodeInputName, @$nodeInputDesc,
      and NodeCreateDiv; resets the input forms if creation is successful
      */


      TopBarCreate.prototype.createNode = function() {
        var nodeObject,
          _this = this;
        nodeObject = this.assign_properties("NodeCreate");
        if (nodeObject[0]) {
          $('.NodeCreateDiv').each(function(i, obj) {
            return $(this)[0].parentNode.removeChild($(this)[0]);
          });
          this.$nodeInputName.val('');
          this.$nodeInputDesc.val('');
          this.$nodeInputName.focus();
          return this.dataController.nodeAdd(nodeObject[1], function(datum) {
            return _this.graphModel.putNode(datum);
          });
        }
      };

      TopBarCreate.prototype.buildLink = function(linkProperties) {
        this.tempLink.properties = linkProperties;
        console.log("tempLink set to", this.tempLink);
        return this.buildingLink = true;
      };

      TopBarCreate.prototype.parseSyntax = function(input) {
        var createDate, dict, match, pattern, strsplit, text;
        console.log("input", input);
        strsplit = input.split('#');
        strsplit[0] = strsplit[0].replace(/:/, " #description ");
        /* The : is shorthand for #description*/

        text = strsplit.join('#');
        pattern = new RegExp(/#([a-zA-Z0-9]+) ([^#]+)/g);
        dict = {};
        match = {};
        while (match = pattern.exec(text)) {
          dict[match[1].trim()] = match[2].trim();
        }
        /*The first entry becomes the name*/

        dict["name"] = text.split('#')[0].trim();
        console.log("This is the title", text.split('#')[0].trim());
        createDate = new Date();
        dict["_Creation_Date"] = createDate;
        return dict;
      };

      return TopBarCreate;

    })(Backbone.View);
  });

}).call(this);
